---
# vars file for add_domain_policy role
# Credentials for cp_mgmt* modules and Settings for the Check Point httpapi plugin that provides methods to connect to Checkpoint devices over a HTTP(S)-based api.
ansible_httpapi_use_ssl: True
ansible_httpapi_validate_certs: False
ansible_network_os: check_point.mgmt.checkpoint
ansible_checkpoint_domain: SMC User
ansible_user: "{{ lookup('env','TF_VAR_mgmt_api_user') }}"
ansible_ssh_pass: "{{ lookup('env','TF_VAR_mgmt_api_password') }}"

#Policy packages to add
policy_name: Orchestration_Demo_Policy
cp_mgmt_package_tasks:
- { state: present, 
    name: Orchestration_Demo_Policy, 
    comments: Created by ansible during Orchestration demo, 
    color: forest green, 
    threat_prevention: true, 
    access: true 
  }

# List of network groups to add
cp_mgmt_group_tasks:
- { state: present, name: ACME_nets}
- { state: present, name: 'ACME_ext_nets'}
- { state: present, name: 'ACME_Security_Gateways'}
- { state: present, name: 'ACME_mgmt_nets'}

# List of networks to add
cp_mgmt_network_tasks:
- { state: present, name: 'Management', subnet: 192.168.233.0/24, groups: ["ACME_mgmt_nets"], color: sea green}
- { state: present, name: 'External', subnet: 10.2.0.0/24, groups: ["ACME_ext_nets"], color: blue}
- { state: present, name: 'Internal', subnet: 10.2.1.0/24, groups: ["ACME_nets"], color: blue}
- { state: present, name: 'WebServers', subnet: 10.2.10.0/24, groups: ["ACME_nets"], color: cyan}
- { state: present, name: 'DBServers', subnet: 10.2.11.0/24, groups: ["ACME_nets"], color: cyan}
- { state: present, name: 'LoadBalancer1', subnet: 10.2.5.0/24, groups: ["ACME_nets"], color: orange}
- { state: present, name: 'LoadBalancer2', subnet: 10.2.6.0/24, groups: ["ACME_nets"], color: orange}

# List of hosts to add
cp_mgmt_host_tasks:
- { state: present, name: hst-dmz-webserver, ip: 10.2.0.10, color: red, nat_auto_rule: true, nat_method: static, nat_ipv4: 172.27.254.210, nat_install_on: All }
# List of access-sections to add to rulebase (not supported with official ansible module)
#mgmt_api_add_access_section:
#- { state: present, name: default drop, layer: Orchestration_Demo_Policy Network, position: top}
#- { state: present, name: ACMECorp Rules, layer: Orchestration_Demo_Policy Network, position: top}

#List of rules to create on in the policy package
cp_mgmt_access_rule_tasks:
#- { state: present, layer: Orchestration_Demo_Policy Network, name: ACMECorp management access to Security Gateways, 
#    position: 1, source: External, destination: ACME_Security_Gateways, service: ["ssh", "https"], action: Accept, track_type: log 
#  }
- { state: present, layer: Orchestration_Demo_Policy Network, name: ACMECorp management access to Security Gateways, 
    position: 1, source: Management, destination: ACME_mgmt_nets, service: ["ssh", "https"], action: Accept, track_type: log
  }
- { state: present,  layer: Orchestration_Demo_Policy Network, name: ACMECorp external to Any, 
    position: 2, source: External, destination: Any, service: ["Any"], action: Accept, track_type: log 
  }
- { state: present, layer: Orchestration_Demo_Policy Network, name: ACMECorp internal to Any, 
    position: 3, source: Internal, destination: Any, service: ["Any"], action: Accept, track_type: log 
  }
- { state: present, layer: Orchestration_Demo_Policy Network, name: ACMECorp WebServer to DB, 
    position: 4, source: WebServers, destination: DBServers, service: ["MySQL"], action: Accept, track_type: log 
  }
- { state: present, layer: Orchestration_Demo_Policy Network, name: ACMECorp WebServer Outbound Access, 
    position: 5, source: WebServers, destination: Any, service: ["http", "https", "ntp", "dns"], action: Accept, track_type: log 
  }
- { state: present, layer: Orchestration_Demo_Policy Network,  name: Allow ICMP and HTTPS,
    position: 6, source: Any, destination: Any, service: ["icmp-requests", "https"], action: Accept, track_type: log 
  }
- { state: present, layer: Orchestration_Demo_Policy Network,  name: LoadBalancers,
    position: 7,  source: Any, destination: ["LoadBalancer1", "LoadBalancer2", "hst-dmz-webserver"], service: ["http", "https"], action: Accept, track_type: log 
  }
  # Enable log on the existing cleanup rule
- { state: present, layer: Orchestration_Demo_Policy Network, name: Cleanup rule, 
    position: 8, position_bottom: "default drop", source: Any, destination: ["Any"], service: ["Any"], action: Drop, track_type: log }

#
#- name: "add NAT rule for Webserver "
#  check_point_mgmt:
#    command: add-nat-rule
#    parameters:
#      package: "Orchestration_Demo_Policy"
#      comments: "Webserver NAT"
#      position: "top"
#      original-source: "WebServers"
#      translated-source: "CHKP-SG-Hide"
#      method: "hide"
#    session-data: "{{login_response}}"